
from pydantic import BaseModel, Field
from typing import List

from dslmodel.agent_model import AgentModel


class WorkflowStep(BaseModel):
    """
    Represents a single step in the workflow pattern tutorial.
    """
    explanation: str = Field(
        ...,
        description="A detailed explanation of the purpose and logic of this step."
    )
    output: str = Field(
        ...,
        description="The specific workflow action, node, or configuration generated in this step."
    )
    references: List[str] = Field(
        default_factory=list,
        description="Optional references to workflow patterns or standards for this step."
    )

class WorkflowPattern(AgentModel):
    """
    Represents the overall workflow pattern including the steps and final workflow.
    """
    name: str = Field(
        ...,
        description="The name of the workflow pattern (e.g., Parallel Split, Multi-Instance Processing)."
    )
    category: str = Field(
        ...,
        description="The category of the workflow pattern (e.g., Control Flow, Resource Allocation)."
    )
    steps: List[WorkflowStep] = Field(
        ...,
        description="A list of steps with explanations and outputs for building this workflow pattern."
    )
    use_case: str = Field(
        ...,
        description="A detailed expert-level use case demonstrating the practical application of this pattern."
    )
    final_workflow: str = Field(
        ...,
        description="A complete textual or JSON representation of the final workflow generated by the pattern."
    )


async def main():
    wf = await WorkflowPattern.from_prompt(
        prompt="Create a workflow pattern for parallel processing.",
        model="groq:llama3-groq-8b-8192-tool-use-preview"
    )

    print("Workflow pattern created successfully.", wf)


if __name__ == '__main__':
    import asyncio

    asyncio.run(main())
